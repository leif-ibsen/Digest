{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/digest"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The Digest package provides the following functionality:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Message Digest algorithms - SHA1, SHA2 and SHA3","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Extendable Output Functions - SHAKE and XOF"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Hash Based Message Authentication Codes - HMAC","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Key Derivation Functions - HKDF and X963KDF"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Mask Generation Function - MGF1","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Random number generation using the Mersenne Twister algorithm","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Message-Digest","level":3,"type":"heading","text":"Message Digest"},{"inlineContent":[{"text":"Message digesting is a three step operation.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Example","type":"text"}]}]},{"syntax":"swift","type":"codeListing","code":["import Digest","","\/\/ 1. create the message digest instance","let md = MessageDigest(.SHA3_224)","","\/\/ 2. feed the data to digest in one or more steps","md.update([1, 2, 3])","md.update([4, 5, 6])","","\/\/ 3. compute the digest","let digest1 = md.digest()","","\/\/ The steps can be combined","let digest2 = MessageDigest(.SHA3_224).digest([1, 2, 3, 4, 5, 6])","","print(\"digest1:\", digest1)","print(\"digest2:\", digest2)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","code":["digest1: [62, 55, 233, 98, 97, 184, 219, 20, 116, 115, 238, 1, 51, 166, 35, 107, 203, 162, 84, 97, 158, 122, 189, 59, 178, 19, 16, 201]","digest2: [62, 55, 233, 98, 97, 184, 219, 20, 116, 115, 238, 1, 51, 166, 35, 107, 203, 162, 84, 97, 158, 122, 189, 59, 178, 19, 16, 201]"],"type":"codeListing"},{"anchor":"SHAKE-and-XOF","type":"heading","level":3,"text":"SHAKE and XOF"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Digest\/documentation\/Digest\/SHAKE","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/Digest\/documentation\/Digest\/XOF","type":"reference","isActive":true},{"text":" are extendable output functions which can generate output of any desired length based on a given seed.","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"SHAKE 128 example"}],"type":"strong"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import Digest","","let shake = SHAKE(.SHAKE128)","shake.update([1, 2, 3])","print(shake.digest(25))"]},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["[218, 239, 167, 7, 93, 32, 41, 187, 214, 105, 12, 86, 166, 83, 123, 154, 218, 108, 92, 47, 146, 196, 24, 130, 197]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you know you need 25 bytes of output, you must request them all at once,"},{"type":"text","text":" "},{"type":"codeVoice","code":"digest(12)"},{"type":"text","text":" followed by "},{"type":"codeVoice","code":"digest(13)"},{"text":" wonâ€™t work, because the ","type":"text"},{"type":"codeVoice","code":"digest"},{"type":"text","text":" method resets "},{"code":"shake","type":"codeVoice"},{"type":"text","text":" to its original state."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"XOF 128 example","type":"text"}]}]},{"code":["import Digest","","let xof = XOF(.XOF128, [1, 2, 3])","var z: Bytes = []","for _ in 0 ..< 25 {","    z += xof.read(1)","}","print(z)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"syntax":"swift","code":["[218, 239, 167, 7, 93, 32, 41, 187, 214, 105, 12, 86, 166, 83, 123, 154, 218, 108, 92, 47, 146, 196, 24, 130, 197]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"XOF is similar to SHAKE, but as the examples show, the XOF ","type":"text"},{"code":"read","type":"codeVoice"},{"type":"text","text":" method can be called many times to accumulate the total amount of output."},{"type":"text","text":" "},{"type":"text","text":"XOF has no "},{"type":"codeVoice","code":"update"},{"type":"text","text":" method, the initial seed must be supplied in the constructor."}]},{"type":"heading","text":"Message Authentication Codes","level":3,"anchor":"Message-Authentication-Codes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Digest\/documentation\/Digest\/HMAC"},{"text":" to generate a message authentication code is a three step operation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"code":["import Digest","","\/\/ 1. create the HMAC instance with a specified message digest and secret key","let hmac = HMAC(.SHA2_256, [1, 2, 3, 4, 5, 6])","","\/\/ 2. update the HMAC instance with the text to compute the code for","hmac.update([1, 2, 3])","","\/\/ 3. compute the code","let code = hmac.compute()","print(code)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["[165, 171, 8, 206, 249, 140, 216, 179, 11, 30, 187, 136, 116, 132, 141, 34, 66, 169, 175, 107, 27, 31, 84, 190, 108, 60, 61, 222, 233, 97, 15, 247]"]},{"type":"heading","text":"Key Derivation Functions","level":3,"anchor":"Key-Derivation-Functions"},{"type":"paragraph","inlineContent":[{"text":"A key derivation function generates a symmetric key from a shared secret. There are two key derivation functions:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"HKDF as specified in [RFC 5859]"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"X963KDF as specified in [SEC 1]."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Both are static methods in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Digest\/documentation\/Digest\/KDF","type":"reference"},{"type":"text","text":" structure."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example"}]}]},{"type":"codeListing","code":["import Digest","","let key1 = KDF.HKDF(.SHA2_224, [1, 2, 3, 4, 5, 6, 7, 8], 12, [1, 2, 3], [])","print(\"HKDF key   \", key1)","","let key2 = KDF.X963KDF(.SHA2_224, [1, 2, 3, 4, 5, 6, 7, 8], 12, [1, 2, 3])","print(\"X963KDF key\", key2)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["HKDF key    [209, 96, 93, 84, 150, 249, 149, 185, 105, 184, 47, 210]","X963KDF key [110, 88, 12, 176, 49, 119, 151, 82, 163, 233, 226, 9]"]},{"type":"heading","anchor":"Mask-Generation-Function","level":3,"text":"Mask Generation Function"},{"type":"paragraph","inlineContent":[{"text":"The mask generation function MGF1 as specified in [RFC 8017], is a static method in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/Digest\/documentation\/Digest\/KDF","isActive":true},{"type":"text","text":" structure."},{"text":"\n","type":"text"},{"text":"It generates a mask of a specified size from a specified message digest and seed.","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Digest","","let mask = KDF.MGF1(.SHA1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12)","print(mask)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"code":["[224, 166, 61, 124, 140, 77, 129, 205, 28, 5, 103, 191]"],"type":"codeListing","syntax":"swift"},{"text":"Random Numbers","type":"heading","anchor":"Random-Numbers","level":3},{"inlineContent":[{"type":"text","text":"The MT class generates random numbers. There are two MT versions:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"One that uses the 32 bit Mersenne Twister algorithm","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"One that uses the 64 bit Mersenne Twister algorithm"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"MT conforms to the ","type":"text"},{"code":"RandomNumberGenerator","type":"codeVoice"},{"type":"text","text":" protocol. It generates:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Random bits"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Random integers in a specified open or closed interval"}]}]},{"content":[{"inlineContent":[{"text":"Random unsigned integers in a specified open or closed interval","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Random floating point values in a specified open or closed interval","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"A generator instance must be instantiated either with a randomly generated seed value or with a specified seed or seed array.","type":"text"},{"text":" ","type":"text"},{"text":"The sequence of generated numbers is deterministic and depends solely on the initial seed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The internal state of a generator instance can be saved with the "},{"code":"getState","type":"codeVoice"},{"type":"text","text":" method and reinstated later with the "},{"type":"codeVoice","code":"setState"},{"type":"text","text":" method."}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Example 1"}],"type":"strong"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import Digest","","\/\/ 32 bit version, randomly generated seed","let mt32 = MT(kind: .MT32)","","let theState = mt32.getState()","for _ in 0 ..< 3 {","  print(mt32.randomInt(in: 0 ..< 100))","}","mt32.setState(state: theState)","print(\"After reinstate\")","for _ in 0 ..< 3 {","  print(mt32.randomInt(in: 0 ..< 100))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving (for example):"}]},{"type":"codeListing","code":["24","75","33","After reinstate","24","75","33"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example 2"}]}]},{"code":["import Digest","","\/\/ 64 bit version, seed array = [123, 456, 789]","let mt64 = MT(kind: .MT64, seed: [123, 456, 789])","","for _ in 0 ..< 10 {","    print(mt64.randomInt(in: -1000 ... 1000))","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"syntax":"swift","code":["781","570","-403","29","-924","-368","553","-60","989","418"],"type":"codeListing"},{"name":"Important","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MT"},{"type":"text","text":" is not suitable for cryptographic applications."}],"type":"paragraph"}],"style":"important"},{"type":"heading","level":3,"text":"Usage","anchor":"Usage"},{"inlineContent":[{"type":"text","text":"To use Digest, in your project Package.swift file add a dependency like"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["dependencies: [","  package(url: \"https:\/\/github.com\/leif-ibsen\/Digest\", from: \"1.6.0\"),","]"]},{"type":"paragraph","inlineContent":[{"text":"Digest itself does not depend on other packages.","type":"text"}]},{"name":"Important","type":"aside","content":[{"inlineContent":[{"type":"text","text":""},{"text":" ","type":"text"},{"text":"Digest requires Swift 5.0. It also requires that the ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"UInt","type":"codeVoice"},{"type":"text","text":" types be 64 bit types."}],"type":"paragraph"}],"style":"important"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"Digest","externalID":"Digest","symbolKind":"module","modules":[{"name":"Digest"}],"role":"collection","roleHeading":"Framework"},"kind":"symbol","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Digest\/documentation\/Digest"},"hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"Digest and random number utilities"}],"topicSections":[{"title":"Classes","identifiers":["doc:\/\/Digest\/documentation\/Digest\/MessageDigest","doc:\/\/Digest\/documentation\/Digest\/MT"]},{"title":"Structures","identifiers":["doc:\/\/Digest\/documentation\/Digest\/HMAC","doc:\/\/Digest\/documentation\/Digest\/KDF","doc:\/\/Digest\/documentation\/Digest\/SHAKE","doc:\/\/Digest\/documentation\/Digest\/XOF"]},{"title":"Type Aliases","identifiers":["doc:\/\/Digest\/documentation\/Digest\/Byte","doc:\/\/Digest\/documentation\/Digest\/Bytes"]},{"identifiers":["doc:\/\/Digest\/documentation\/Digest\/References"],"title":"Additional Information"}],"references":{"doc://Digest/documentation/Digest/Byte":{"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Byte"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Digest\/documentation\/Digest\/Byte","url":"\/documentation\/digest\/byte","title":"Byte","abstract":[{"type":"text","text":"Unsigned 8 bit value"}],"navigatorTitle":[{"kind":"identifier","text":"Byte"}]},"doc://Digest/documentation/Digest/HMAC":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HMAC","kind":"identifier"}],"navigatorTitle":[{"text":"HMAC","kind":"identifier"}],"url":"\/documentation\/digest\/hmac","title":"HMAC","identifier":"doc:\/\/Digest\/documentation\/Digest\/HMAC","kind":"symbol","abstract":[{"type":"text","text":"The HMAC structure"}],"type":"topic"},"doc://Digest/documentation/Digest/MT":{"url":"\/documentation\/digest\/mt","identifier":"doc:\/\/Digest\/documentation\/Digest\/MT","role":"symbol","title":"MT","kind":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MT"}],"navigatorTitle":[{"text":"MT","kind":"identifier"}],"abstract":[{"type":"text","text":"The Mersenne Twister class"}]},"doc://Digest/documentation/Digest/SHAKE":{"role":"symbol","identifier":"doc:\/\/Digest\/documentation\/Digest\/SHAKE","url":"\/documentation\/digest\/shake","title":"SHAKE","type":"topic","abstract":[{"text":"The SHAKE structure","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SHAKE","kind":"identifier"}],"navigatorTitle":[{"text":"SHAKE","kind":"identifier"}],"kind":"symbol"},"doc://Digest/documentation/Digest/XOF":{"abstract":[{"type":"text","text":"The XOF structure"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"XOF","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Digest\/documentation\/Digest\/XOF","title":"XOF","url":"\/documentation\/digest\/xof","navigatorTitle":[{"text":"XOF","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://Digest/documentation/Digest/Bytes":{"url":"\/documentation\/digest\/bytes","kind":"symbol","title":"Bytes","navigatorTitle":[{"kind":"identifier","text":"Bytes"}],"abstract":[{"type":"text","text":"Array of unsigned 8 bit values"}],"role":"symbol","type":"topic","identifier":"doc:\/\/Digest\/documentation\/Digest\/Bytes","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bytes"}]},"doc://Digest/documentation/Digest/MessageDigest":{"identifier":"doc:\/\/Digest\/documentation\/Digest\/MessageDigest","abstract":[{"type":"text","text":"The MessageDigest class"}],"title":"MessageDigest","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MessageDigest"}],"navigatorTitle":[{"kind":"identifier","text":"MessageDigest"}],"role":"symbol","kind":"symbol","url":"\/documentation\/digest\/messagedigest","type":"topic"},"doc://Digest/documentation/Digest/References":{"url":"\/documentation\/digest\/references","kind":"article","identifier":"doc:\/\/Digest\/documentation\/Digest\/References","type":"topic","abstract":[{"text":"Algorithms from the following documents have been used in the implementation","type":"text"}],"title":"References","role":"article"},"doc://Digest/documentation/Digest/KDF":{"identifier":"doc:\/\/Digest\/documentation\/Digest\/KDF","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"KDF","kind":"identifier"}],"abstract":[{"text":"The KDF structure","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"KDF","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/digest\/kdf","title":"KDF"},"doc://Digest/documentation/Digest":{"type":"topic","kind":"symbol","role":"collection","url":"\/documentation\/digest","title":"Digest","abstract":[{"type":"text","text":"Digest and random number utilities"}],"identifier":"doc:\/\/Digest\/documentation\/Digest"}}}
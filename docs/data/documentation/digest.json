{"sections":[],"abstract":[{"text":"Digest utilities","type":"text"}],"hierarchy":{"paths":[[]]},"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Digest package provides the following functionality:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Base64 encoding of bytes to text strings and the reverse decoding","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Base64 PEM encoding and decoding typically used to encode and decode cryptographic keys"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Conversion between byte arrays and hexadecimal strings"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Message Digest algorithms - SHA1, SHA2 and SHA3"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extendable Output Functions - SHAKE and XOF"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Hash Based Message Authentication Codes - HMAC"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Key Derivation Functions - HKDF and X963KDF"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Mask Generation Function - MGF1"}]}]}]},{"type":"heading","level":3,"anchor":"Base64","text":"Base64"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Base64 example","type":"text"}],"type":"strong"}]},{"code":["import Digest","","let b: Bytes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","let b64 = Base64.encode(b)","print(b64)","print(Base64.decode(b64)!)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"type":"codeListing","code":["AAECAwQFBgcICQo=","[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"],"syntax":"swift"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"PEM example"}]}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import Digest","","let pem =","\"\"\"","-----BEGIN PUBLIC KEY-----","MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEA6txn7CCae0d9AiGj3Rk5m9XflTCB81oe1fKZi4F4oip","SF2u79k8TD5J","-----END PUBLIC KEY-----","\"\"\"","\/\/ pem happens to be the PEM encoding of a public key from the ´sect163k1´ elliptic curve domain","","let der = Base64.pemDecode(pem, \"PUBLIC KEY\")!","","\/\/ ´der´ is the ASN1 DER encoding of the key from which the key could be recreated","print(der)"]},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"code":["[48, 64, 48, 16, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 5, 43, 129, 4, 0, 1, 3, 44, 0, 4, 3, 171, 113, 159, 176, 130, 105, 237, 29, 244, 8, 134, 143, 116, 100, 230, 111, 87, 126, 84, 194, 7, 205, 104, 123, 87, 202, 102, 46, 5, 226, 136, 169, 72, 93, 174, 239, 217, 60, 76, 62, 73]"],"syntax":"swift","type":"codeListing"},{"text":"Message Digest","type":"heading","anchor":"Message-Digest","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Message digesting is a three step operation."}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example"}]}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Digest","","\/\/ 1. create the message digest instance","let md = MessageDigest(.SHA3_224)","","\/\/ 2. feed the data to digest in one or more steps","md.update([1, 2, 3])","md.update([4, 5, 6])","","\/\/ 3. compute the digest","let digest1 = md.digest()","","\/\/ The steps can be combined","let digest2 = MessageDigest(.SHA3_224).digest([1, 2, 3, 4, 5, 6])","","print(\"digest1:\", digest1)","print(\"digest2:\", digest2)"]},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["digest1: [62, 55, 233, 98, 97, 184, 219, 20, 116, 115, 238, 1, 51, 166, 35, 107, 203, 162, 84, 97, 158, 122, 189, 59, 178, 19, 16, 201]","digest2: [62, 55, 233, 98, 97, 184, 219, 20, 116, 115, 238, 1, 51, 166, 35, 107, 203, 162, 84, 97, 158, 122, 189, 59, 178, 19, 16, 201]"]},{"text":"SHAKE and XOF","anchor":"SHAKE-and-XOF","level":3,"type":"heading"},{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/Digest\/documentation\/Digest\/SHAKE","type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/Digest\/documentation\/Digest\/XOF","isActive":true,"type":"reference"},{"type":"text","text":" are extendable output functions which can generate output of any desired length based on a given seed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"SHAKE 128 example"}]}]},{"syntax":"swift","code":["import Digest","","let shake = SHAKE(.SHAKE128)","shake.update([1, 2, 3])","print(shake.digest(25))"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","code":["[218, 239, 167, 7, 93, 32, 41, 187, 214, 105, 12, 86, 166, 83, 123, 154, 218, 108, 92, 47, 146, 196, 24, 130, 197]"],"type":"codeListing"},{"inlineContent":[{"text":"If you know you need 25 bytes of output, you must request them all at once,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"digest(12)"},{"type":"text","text":" followed by "},{"type":"codeVoice","code":"digest(13)"},{"text":" won’t work, because the ","type":"text"},{"code":"digest","type":"codeVoice"},{"type":"text","text":" method resets "},{"code":"shake","type":"codeVoice"},{"type":"text","text":" to its original state."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"XOF 128 example","type":"text"}]}]},{"syntax":"swift","code":["import Digest","","let xof = XOF(.XOF128, [1, 2, 3])","var z: Bytes = []","for _ in 0 ..< 25 {","    z += xof.read(1)","}","print(z)"],"type":"codeListing"},{"inlineContent":[{"text":"giving:","type":"text"}],"type":"paragraph"},{"code":["[218, 239, 167, 7, 93, 32, 41, 187, 214, 105, 12, 86, 166, 83, 123, 154, 218, 108, 92, 47, 146, 196, 24, 130, 197]"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"XOF is similar to SHAKE, but as the examples show, the XOF "},{"type":"codeVoice","code":"read"},{"text":" method can be called many times to accumulate the total amount of output.","type":"text"},{"text":" ","type":"text"},{"text":"XOF has no ","type":"text"},{"code":"update","type":"codeVoice"},{"text":" method, the initial seed must be supplied in the constructor.","type":"text"}],"type":"paragraph"},{"anchor":"Message-Authentication-Codes","type":"heading","level":3,"text":"Message Authentication Codes"},{"inlineContent":[{"type":"text","text":"Using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Digest\/documentation\/Digest\/HMAC"},{"type":"text","text":" to generate a message authentication code is a three step operation."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example"}]}]},{"syntax":"swift","type":"codeListing","code":["import Digest","","\/\/ 1. create the HMAC instance with a specified message digest and secret key","let hmac = HMAC(.SHA2_256, [1, 2, 3, 4, 5, 6])","","\/\/ 2. update the HMAC instance with the text to compute the code for","hmac.update([1, 2, 3])","","\/\/ 3. compute the code","let code = hmac.compute()","print(code)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"type":"codeListing","syntax":"swift","code":["[165, 171, 8, 206, 249, 140, 216, 179, 11, 30, 187, 136, 116, 132, 141, 34, 66, 169, 175, 107, 27, 31, 84, 190, 108, 60, 61, 222, 233, 97, 15, 247]"]},{"anchor":"Key-Derivation-Functions","type":"heading","text":"Key Derivation Functions","level":3},{"inlineContent":[{"type":"text","text":"A key derivation function generates a symmetric key from a shared secret. There are two key derivation functions:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"HKDF as specified in [RFC 5859]"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"X963KDF as specified in [SEC 1]."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both are static methods in the "},{"isActive":true,"identifier":"doc:\/\/Digest\/documentation\/Digest\/KDF","type":"reference"},{"type":"text","text":" structure."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"code":["import Digest","","let key1 = KDF.HKDF(.SHA2_224, [1, 2, 3, 4, 5, 6, 7, 8], 12, [1, 2, 3], [])","print(\"HKDF key   \", key1)","","let key2 = KDF.X963KDF(.SHA2_224, [1, 2, 3, 4, 5, 6, 7, 8], 12, [1, 2, 3])","print(\"X963KDF key\", key2)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["HKDF key    [209, 96, 93, 84, 150, 249, 149, 185, 105, 184, 47, 210]","X963KDF key [110, 88, 12, 176, 49, 119, 151, 82, 163, 233, 226, 9]"]},{"level":3,"anchor":"Mask-Generation-Function","type":"heading","text":"Mask Generation Function"},{"inlineContent":[{"type":"text","text":"The mask generation function MGF1 as specified in [RFC 8017], is a static method in the "},{"type":"reference","identifier":"doc:\/\/Digest\/documentation\/Digest\/KDF","isActive":true},{"text":" structure.","type":"text"},{"type":"text","text":"\n"},{"type":"text","text":"It generates a mask of a specified size from a specified message digest and seed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Example","type":"text"}]}]},{"syntax":"swift","code":["import Digest","","let mask = KDF.MGF1(.SHA1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12)","print(mask)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","code":["[224, 166, 61, 124, 140, 77, 129, 205, 28, 5, 103, 191]"],"type":"codeListing"},{"level":3,"anchor":"Usage","text":"Usage","type":"heading"},{"inlineContent":[{"text":"To use Digest, in your project Package.swift file add a dependency like","type":"text"}],"type":"paragraph"},{"code":["dependencies: [","  package(url: \"https:\/\/github.com\/leif-ibsen\/Digest\", from: \"1.9.0\"),","]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Digest itself does not depend on other packages.","type":"text"}]},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"text":" ","type":"text"},{"text":"Digest requires Swift 5.0. It also requires that the ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"UInt","type":"codeVoice"},{"text":" types be 64 bit types.","type":"text"}]}],"style":"important","type":"aside"}],"kind":"content"}],"topicSections":[{"anchor":"Classes","title":"Classes","identifiers":["doc:\/\/Digest\/documentation\/Digest\/MessageDigest"]},{"title":"Structures","identifiers":["doc:\/\/Digest\/documentation\/Digest\/Base64","doc:\/\/Digest\/documentation\/Digest\/HMAC","doc:\/\/Digest\/documentation\/Digest\/KDF","doc:\/\/Digest\/documentation\/Digest\/SHAKE","doc:\/\/Digest\/documentation\/Digest\/XOF"],"anchor":"Structures"},{"anchor":"Type-Aliases","identifiers":["doc:\/\/Digest\/documentation\/Digest\/Byte","doc:\/\/Digest\/documentation\/Digest\/Bytes"],"title":"Type Aliases"},{"identifiers":["doc:\/\/Digest\/documentation\/Digest\/References"],"title":"Additional Information","anchor":"Additional-Information"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/digest"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"modules":[{"name":"Digest"}],"role":"collection","roleHeading":"Framework","title":"Digest","symbolKind":"module","externalID":"Digest"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Digest\/documentation\/Digest"},"kind":"symbol","references":{"doc://Digest/documentation/Digest":{"title":"Digest","identifier":"doc:\/\/Digest\/documentation\/Digest","url":"\/documentation\/digest","abstract":[{"text":"Digest utilities","type":"text"}],"type":"topic","role":"collection","kind":"symbol"},"doc://Digest/documentation/Digest/Byte":{"identifier":"doc:\/\/Digest\/documentation\/Digest\/Byte","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Byte"}],"url":"\/documentation\/digest\/byte","title":"Byte","kind":"symbol","type":"topic","abstract":[{"text":"Unsigned 8 bit value","type":"text"}],"navigatorTitle":[{"text":"Byte","kind":"identifier"}]},"doc://Digest/documentation/Digest/KDF":{"identifier":"doc:\/\/Digest\/documentation\/Digest\/KDF","abstract":[{"type":"text","text":"The KDF structure"}],"role":"symbol","url":"\/documentation\/digest\/kdf","title":"KDF","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KDF"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"KDF","kind":"identifier"}]},"doc://Digest/documentation/Digest/XOF":{"title":"XOF","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"XOF"}],"identifier":"doc:\/\/Digest\/documentation\/Digest\/XOF","url":"\/documentation\/digest\/xof","abstract":[{"text":"The XOF structure","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"XOF"}]},"doc://Digest/documentation/Digest/MessageDigest":{"title":"MessageDigest","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"MessageDigest","kind":"identifier"}],"navigatorTitle":[{"text":"MessageDigest","kind":"identifier"}],"identifier":"doc:\/\/Digest\/documentation\/Digest\/MessageDigest","url":"\/documentation\/digest\/messagedigest","role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"The MessageDigest class","type":"text"}]},"doc://Digest/documentation/Digest/Bytes":{"role":"symbol","title":"Bytes","type":"topic","url":"\/documentation\/digest\/bytes","navigatorTitle":[{"kind":"identifier","text":"Bytes"}],"identifier":"doc:\/\/Digest\/documentation\/Digest\/Bytes","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bytes","kind":"identifier"}],"abstract":[{"type":"text","text":"Array of unsigned 8 bit values"}],"kind":"symbol"},"doc://Digest/documentation/Digest/Base64":{"navigatorTitle":[{"text":"Base64","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Base64","kind":"identifier"}],"title":"Base64","kind":"symbol","type":"topic","url":"\/documentation\/digest\/base64","identifier":"doc:\/\/Digest\/documentation\/Digest\/Base64","abstract":[{"type":"text","text":"The Base64 structure"}],"role":"symbol"},"doc://Digest/documentation/Digest/References":{"title":"References","kind":"article","abstract":[{"type":"text","text":"Algorithms from the following documents have been used in the implementation"}],"identifier":"doc:\/\/Digest\/documentation\/Digest\/References","type":"topic","role":"article","url":"\/documentation\/digest\/references"},"doc://Digest/documentation/Digest/HMAC":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HMAC"}],"abstract":[{"type":"text","text":"The HMAC structure"}],"title":"HMAC","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"HMAC","kind":"identifier"}],"identifier":"doc:\/\/Digest\/documentation\/Digest\/HMAC","url":"\/documentation\/digest\/hmac"},"doc://Digest/documentation/Digest/SHAKE":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SHAKE","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SHAKE"}],"identifier":"doc:\/\/Digest\/documentation\/Digest\/SHAKE","title":"SHAKE","type":"topic","url":"\/documentation\/digest\/shake","abstract":[{"text":"The SHAKE structure","type":"text"}],"kind":"symbol"}}}
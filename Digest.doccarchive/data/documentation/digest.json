{"kind":"symbol","hierarchy":{"paths":[[]]},"variants":[{"paths":["\/documentation\/digest"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"text":"Digest Utilities","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/digest.Digest\/documentation\/Digest","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/digest.Digest\/documentation\/Digest\/MessageDigest"],"anchor":"Classes","title":"Classes"},{"anchor":"Structures","identifiers":["doc:\/\/digest.Digest\/documentation\/Digest\/SHAKE","doc:\/\/digest.Digest\/documentation\/Digest\/XOF","doc:\/\/digest.Digest\/documentation\/Digest\/HMAC","doc:\/\/digest.Digest\/documentation\/Digest\/KDF","doc:\/\/digest.Digest\/documentation\/Digest\/Base64"],"title":"Structures"},{"identifiers":["doc:\/\/digest.Digest\/documentation\/Digest\/Byte","doc:\/\/digest.Digest\/documentation\/Digest\/Bytes"],"title":"Type Aliases","anchor":"Type-Aliases"},{"identifiers":["doc:\/\/digest.Digest\/documentation\/Digest\/References"],"anchor":"Additional-Information","title":"Additional Information"}],"metadata":{"modules":[{"name":"Digest"}],"roleHeading":"Framework","role":"collection","title":"Digest","symbolKind":"module","externalID":"Digest"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"inlineContent":[{"text":"The Digest package provides the following functionality:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Message Digest algorithms - SHA1, SHA2 and SHA3"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Extendable Output Functions - SHAKE and XOF","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Hash Based Message Authentication Codes - HMAC"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Key Derivation Functions - HKDF and X963KDF"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Mask Generation Function - MGF1"}]}]},{"content":[{"inlineContent":[{"text":"Base64 encoding of bytes to text strings and the reverse decoding","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Base64 PEM encoding and decoding typically used to encode and decode cryptographic keys"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Conversion between byte arrays and hexadecimal strings","type":"text"}]}]}],"type":"unorderedList"},{"text":"Message Digest","anchor":"Message-Digest","type":"heading","level":3},{"inlineContent":[{"text":"Message digesting is a three step operation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}],"type":"paragraph"},{"code":["import Digest","","\/\/ 1. create the message digest instance","let md = MessageDigest(.SHA3_224)","","\/\/ 2. feed the data to digest in one or more steps","md.update([1, 2, 3])","md.update([4, 5, 6])","","\/\/ 3. compute the digest","let digest1 = md.digest()","","\/\/ The steps can be combined","let digest2 = MessageDigest(.SHA3_224).digest([1, 2, 3, 4, 5, 6])","","print(\"digest1:\", digest1)","print(\"digest2:\", digest2)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["digest1: [62, 55, 233, 98, 97, 184, 219, 20, 116, 115, 238, 1, 51, 166, 35, 107, 203, 162, 84, 97, 158, 122, 189, 59, 178, 19, 16, 201]","digest2: [62, 55, 233, 98, 97, 184, 219, 20, 116, 115, 238, 1, 51, 166, 35, 107, 203, 162, 84, 97, 158, 122, 189, 59, 178, 19, 16, 201]"]},{"level":3,"anchor":"SHAKE-and-XOF","type":"heading","text":"SHAKE and XOF"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/SHAKE","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/XOF","isActive":true},{"type":"text","text":" are extendable output functions which can generate output of any desired length based on a given seed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"SHAKE 128 example","type":"text"}]}]},{"type":"codeListing","code":["import Digest","","let shake = SHAKE(.SHAKE128)","shake.update([1, 2, 3])","print(shake.digest(25))"],"syntax":"swift"},{"inlineContent":[{"text":"giving:","type":"text"}],"type":"paragraph"},{"code":["[218, 239, 167, 7, 93, 32, 41, 187, 214, 105, 12, 86, 166, 83, 123, 154, 218, 108, 92, 47, 146, 196, 24, 130, 197]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you know you need 25 bytes of output, you must request them all at once,"},{"type":"text","text":" "},{"type":"codeVoice","code":"digest(12)"},{"text":" followed by ","type":"text"},{"code":"digest(13)","type":"codeVoice"},{"text":" wonâ€™t work, because the ","type":"text"},{"type":"codeVoice","code":"digest"},{"type":"text","text":" method resets "},{"type":"codeVoice","code":"shake"},{"text":" to its original state.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"XOF 128 example","type":"text"}]}]},{"type":"codeListing","syntax":"swift","code":["import Digest","","let xof = XOF(.XOF128, [1, 2, 3])","var z: Bytes = []","for _ in 0 ..< 25 {","    z += xof.read(1)","}","print(z)"]},{"inlineContent":[{"text":"giving:","type":"text"}],"type":"paragraph"},{"code":["[218, 239, 167, 7, 93, 32, 41, 187, 214, 105, 12, 86, 166, 83, 123, 154, 218, 108, 92, 47, 146, 196, 24, 130, 197]"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"XOF is similar to SHAKE, but as the examples show, the XOF "},{"type":"codeVoice","code":"read"},{"type":"text","text":" method can be called many times to accumulate the total amount of output."},{"type":"text","text":" "},{"text":"XOF has no ","type":"text"},{"type":"codeVoice","code":"update"},{"text":" method, the initial seed must be supplied in the constructor.","type":"text"}],"type":"paragraph"},{"anchor":"Message-Authentication-Codes","type":"heading","level":3,"text":"Message Authentication Codes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/HMAC","type":"reference","isActive":true},{"text":" to generate a message authentication code is a three step operation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example"}]}]},{"type":"codeListing","syntax":"swift","code":["import Digest","","\/\/ 1. create the HMAC instance with a specified message digest and secret key","let hmac = HMAC(.SHA2_256, [1, 2, 3, 4, 5, 6])","","\/\/ 2. update the HMAC instance with the text to compute the code for","hmac.update([1, 2, 3])","","\/\/ 3. compute the code","let code = hmac.compute()","print(code)"]},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"type":"codeListing","code":["[165, 171, 8, 206, 249, 140, 216, 179, 11, 30, 187, 136, 116, 132, 141, 34, 66, 169, 175, 107, 27, 31, 84, 190, 108, 60, 61, 222, 233, 97, 15, 247]"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"Key-Derivation-Functions","text":"Key Derivation Functions"},{"inlineContent":[{"text":"A key derivation function generates a symmetric key from a shared secret. There are two key derivation functions:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"HKDF as specified in [RFC 5859]"}]}]},{"content":[{"inlineContent":[{"text":"X963KDF as specified in [SEC 1].","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Both are static methods in the "},{"type":"reference","identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/KDF","isActive":true},{"text":" structure.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Example","type":"text"}]}],"type":"paragraph"},{"code":["import Digest","","let key1 = KDF.HKDF(.SHA2_224, [1, 2, 3, 4, 5, 6, 7, 8], 12, [1, 2, 3], [])","print(\"HKDF key   \", key1)","","let key2 = KDF.X963KDF(.SHA2_224, [1, 2, 3, 4, 5, 6, 7, 8], 12, [1, 2, 3])","print(\"X963KDF key\", key2)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["HKDF key    [209, 96, 93, 84, 150, 249, 149, 185, 105, 184, 47, 210]","X963KDF key [110, 88, 12, 176, 49, 119, 151, 82, 163, 233, 226, 9]"]},{"anchor":"Mask-Generation-Function","type":"heading","text":"Mask Generation Function","level":3},{"inlineContent":[{"type":"text","text":"The mask generation function MGF1 as specified in [RFC 8017], is a static method in the "},{"identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/KDF","isActive":true,"type":"reference"},{"type":"text","text":" structure."},{"type":"text","text":"\n"},{"text":"It generates a mask of a specified size from a specified message digest and seed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Example","type":"text"}]}]},{"syntax":"swift","code":["import Digest","","let mask = KDF.MGF1(.SHA1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12)","print(mask)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"type":"codeListing","code":["[224, 166, 61, 124, 140, 77, 129, 205, 28, 5, 103, 191]"],"syntax":"swift"},{"anchor":"Base64","text":"Base64","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Base64 example","type":"text"}]}]},{"code":["import Digest","","let b: Bytes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","let b64 = Base64.encode(b)","print(b64)","print(Base64.decode(b64)!)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["AAECAwQFBgcICQo=","[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"PEM example"}],"type":"strong"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Digest","","let pem =","\"\"\"","-----BEGIN PUBLIC KEY-----","MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEA6txn7CCae0d9AiGj3Rk5m9XflTCB81oe1fKZi4F4oip","SF2u79k8TD5J","-----END PUBLIC KEY-----","\"\"\"","\/\/ pem happens to be the PEM encoding of a public key from the Â´sect163k1Â´ elliptic curve domain","","let der = Base64.pemDecode(pem, \"PUBLIC KEY\")!","","\/\/ Â´derÂ´ is the ASN1 DER encoding of the key from which the key could be recreated","print(der)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"code":["[48, 64, 48, 16, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 5, 43, 129, 4, 0, 1, 3, 44, 0, 4, 3, 171, 113, 159, 176, 130, 105, 237, 29, 244, 8, 134, 143, 116, 100, 230, 111, 87, 126, 84, 194, 7, 205, 104, 123, 87, 202, 102, 46, 5, 226, 136, 169, 72, 93, 174, 239, 217, 60, 76, 62, 73]"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Usage","anchor":"Usage","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"To use Digest, in your project Package.swift file add a dependency like","type":"text"}]},{"code":["dependencies: [","  package(url: \"https:\/\/github.com\/leif-ibsen\/Digest\", from: \"1.10.0\"),","]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Digest itself does not depend on other packages."}]},{"style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"Digest requires Swift 5.0. It also requires that the "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" and "},{"code":"UInt","type":"codeVoice"},{"type":"text","text":" types be 64 bit types."}]}],"type":"aside"}]}],"references":{"doc://digest.Digest/documentation/Digest/Byte":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Byte"}],"type":"topic","url":"\/documentation\/digest\/byte","abstract":[{"type":"text","text":"Unsigned 8 bit value"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Byte"}],"role":"symbol","identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/Byte","title":"Byte"},"doc://digest.Digest/documentation/Digest/SHAKE":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SHAKE"}],"role":"symbol","title":"SHAKE","abstract":[{"type":"text","text":"The SHAKE structure"}],"type":"topic","navigatorTitle":[{"text":"SHAKE","kind":"identifier"}],"url":"\/documentation\/digest\/shake","kind":"symbol","identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/SHAKE"},"doc://digest.Digest/documentation/Digest/XOF":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"XOF"}],"title":"XOF","url":"\/documentation\/digest\/xof","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"XOF","kind":"identifier"}],"identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/XOF","role":"symbol","abstract":[{"type":"text","text":"The XOF structure"}]},"doc://digest.Digest/documentation/Digest/HMAC":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HMAC"}],"identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/HMAC","url":"\/documentation\/digest\/hmac","title":"HMAC","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HMAC","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The HMAC structure"}]},"doc://digest.Digest/documentation/Digest/Base64":{"identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/Base64","url":"\/documentation\/digest\/base64","title":"Base64","abstract":[{"type":"text","text":"The Base64 structure"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Base64"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Base64","kind":"identifier"}]},"doc://digest.Digest/documentation/Digest/KDF":{"navigatorTitle":[{"kind":"identifier","text":"KDF"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"KDF","kind":"identifier"}],"url":"\/documentation\/digest\/kdf","abstract":[{"type":"text","text":"The KDF structure"}],"identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/KDF","kind":"symbol","title":"KDF","role":"symbol"},"doc://digest.Digest/documentation/Digest":{"role":"collection","identifier":"doc:\/\/digest.Digest\/documentation\/Digest","url":"\/documentation\/digest","title":"Digest","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Digest Utilities"}]},"doc://digest.Digest/documentation/Digest/MessageDigest":{"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"MessageDigest","kind":"identifier"}],"identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/MessageDigest","type":"topic","title":"MessageDigest","navigatorTitle":[{"kind":"identifier","text":"MessageDigest"}],"abstract":[{"type":"text","text":"The MessageDigest class"}],"url":"\/documentation\/digest\/messagedigest","kind":"symbol"},"doc://digest.Digest/documentation/Digest/References":{"identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/References","role":"article","url":"\/documentation\/digest\/references","kind":"article","type":"topic","abstract":[{"text":"Algorithms from the following documents have been used in the implementation","type":"text"}],"title":"References"},"doc://digest.Digest/documentation/Digest/Bytes":{"navigatorTitle":[{"text":"Bytes","kind":"identifier"}],"abstract":[{"type":"text","text":"Array of unsigned 8 bit values"}],"type":"topic","title":"Bytes","url":"\/documentation\/digest\/bytes","identifier":"doc:\/\/digest.Digest\/documentation\/Digest\/Bytes","kind":"symbol","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bytes"}]}}}
{"abstract":[{"type":"text","text":"Digest and random number utilities"}],"identifier":{"url":"doc:\/\/Digest\/documentation\/Digest","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","sections":[],"topicSections":[{"identifiers":["doc:\/\/Digest\/documentation\/Digest\/MessageDigest","doc:\/\/Digest\/documentation\/Digest\/MT"],"title":"Classes"},{"title":"Structures","identifiers":["doc:\/\/Digest\/documentation\/Digest\/HMAC","doc:\/\/Digest\/documentation\/Digest\/KDF","doc:\/\/Digest\/documentation\/Digest\/SHAKE","doc:\/\/Digest\/documentation\/Digest\/XOF"]},{"identifiers":["doc:\/\/Digest\/documentation\/Digest\/Byte","doc:\/\/Digest\/documentation\/Digest\/Bytes"],"title":"Type Aliases"},{"title":"Additional Information","identifiers":["doc:\/\/Digest\/documentation\/Digest\/References"]}],"hierarchy":{"paths":[[]]},"metadata":{"role":"collection","modules":[{"name":"Digest"}],"title":"Digest","symbolKind":"module","roleHeading":"Framework","externalID":"Digest"},"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Digest package provides the following functionality:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Message Digest algorithms - SHA1, SHA2 and SHA3"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extendable Output Functions - SHAKE and XOF"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Hash Based Message Authentication Codes - HMAC"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Key Derivation Functions - HKDF and X963KDF"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Mask Generation Function - MGF1","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Random number generation using the Mersenne Twister algorithm","type":"text"}]}]}],"type":"unorderedList"},{"text":"Message Digest","anchor":"Message-Digest","level":3,"type":"heading"},{"inlineContent":[{"text":"Message digesting is a three step operation.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"type":"codeListing","syntax":"swift","code":["import Digest","","\/\/ 1. create the message digest instance","let md = MessageDigest(.SHA3_224)","","\/\/ 2. feed the data to digest in one or more steps","md.update([1, 2, 3])","md.update([4, 5, 6])","","\/\/ 3. compute the digest","let digest1 = md.digest()","","\/\/ The steps can be combined","let digest2 = MessageDigest(.SHA3_224).digest([1, 2, 3, 4, 5, 6])","","print(\"digest1:\", digest1)","print(\"digest2:\", digest2)"]},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"code":["digest1: [62, 55, 233, 98, 97, 184, 219, 20, 116, 115, 238, 1, 51, 166, 35, 107, 203, 162, 84, 97, 158, 122, 189, 59, 178, 19, 16, 201]","digest2: [62, 55, 233, 98, 97, 184, 219, 20, 116, 115, 238, 1, 51, 166, 35, 107, 203, 162, 84, 97, 158, 122, 189, 59, 178, 19, 16, 201]"],"type":"codeListing","syntax":"swift"},{"anchor":"SHAKE-and-XOF","type":"heading","level":3,"text":"SHAKE and XOF"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/Digest\/documentation\/Digest\/SHAKE","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/Digest\/documentation\/Digest\/XOF","isActive":true},{"text":" are extendable output functions which can generate output of any desired length based on a given seed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"SHAKE 128 example","type":"text"}],"type":"strong"}]},{"syntax":"swift","code":["import Digest","","let shake = SHAKE(.SHAKE128)","shake.update([1, 2, 3])","print(shake.digest(25))"],"type":"codeListing"},{"inlineContent":[{"text":"giving:","type":"text"}],"type":"paragraph"},{"code":["[218, 239, 167, 7, 93, 32, 41, 187, 214, 105, 12, 86, 166, 83, 123, 154, 218, 108, 92, 47, 146, 196, 24, 130, 197]"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you know you need 25 bytes of output, you must request them all at once,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"digest(12)"},{"type":"text","text":" followed by "},{"type":"codeVoice","code":"digest(13)"},{"type":"text","text":" wonâ€™t work, because the "},{"code":"digest","type":"codeVoice"},{"type":"text","text":" method resets "},{"type":"codeVoice","code":"shake"},{"type":"text","text":" to its original state."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"XOF 128 example"}],"type":"strong"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Digest","","let xof = XOF(.XOF128, [1, 2, 3])","var z: Bytes = []","for _ in 0 ..< 25 {","    z += xof.read(1)","}","print(z)"]},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"code":["[218, 239, 167, 7, 93, 32, 41, 187, 214, 105, 12, 86, 166, 83, 123, 154, 218, 108, 92, 47, 146, 196, 24, 130, 197]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"XOF is similar to SHAKE, but as the examples show, the XOF ","type":"text"},{"code":"read","type":"codeVoice"},{"text":" method can be called many times to accumulate the total amount of output.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"XOF has no "},{"code":"update","type":"codeVoice"},{"type":"text","text":" method, the initial seed must be supplied in the constructor."}]},{"level":3,"text":"Message Authentication Codes","type":"heading","anchor":"Message-Authentication-Codes"},{"type":"paragraph","inlineContent":[{"text":"Using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Digest\/documentation\/Digest\/HMAC","type":"reference"},{"type":"text","text":" to generate a message authentication code is a three step operation."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"syntax":"swift","type":"codeListing","code":["import Digest","","\/\/ 1. create the HMAC instance with a specified message digest and secret key","let hmac = HMAC(.SHA2_256, [1, 2, 3, 4, 5, 6])","","\/\/ 2. update the HMAC instance with the text to compute the code for","hmac.update([1, 2, 3])","","\/\/ 3. compute the code","let code = hmac.compute()","print(code)"]},{"inlineContent":[{"text":"giving:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["[165, 171, 8, 206, 249, 140, 216, 179, 11, 30, 187, 136, 116, 132, 141, 34, 66, 169, 175, 107, 27, 31, 84, 190, 108, 60, 61, 222, 233, 97, 15, 247]"],"syntax":"swift"},{"anchor":"Key-Derivation-Functions","level":3,"text":"Key Derivation Functions","type":"heading"},{"inlineContent":[{"text":"A key derivation function generates a symmetric key from a shared secret. There are two key derivation functions:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"HKDF as specified in [RFC 5859]"}]}]},{"content":[{"inlineContent":[{"text":"X963KDF as specified in [SEC 1].","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both are static methods in the "},{"isActive":true,"identifier":"doc:\/\/Digest\/documentation\/Digest\/KDF","type":"reference"},{"text":" structure.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"syntax":"swift","type":"codeListing","code":["import Digest","","let key1 = KDF.HKDF(.SHA2_224, [1, 2, 3, 4, 5, 6, 7, 8], 12, [1, 2, 3], [])","print(\"HKDF key   \", key1)","","let key2 = KDF.X963KDF(.SHA2_224, [1, 2, 3, 4, 5, 6, 7, 8], 12, [1, 2, 3])","print(\"X963KDF key\", key2)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","type":"codeListing","code":["HKDF key    [209, 96, 93, 84, 150, 249, 149, 185, 105, 184, 47, 210]","X963KDF key [110, 88, 12, 176, 49, 119, 151, 82, 163, 233, 226, 9]"]},{"level":3,"text":"Mask Generation Function","anchor":"Mask-Generation-Function","type":"heading"},{"inlineContent":[{"type":"text","text":"The mask generation function MGF1 as specified in [RFC 8017], is a static method in the "},{"identifier":"doc:\/\/Digest\/documentation\/Digest\/KDF","isActive":true,"type":"reference"},{"type":"text","text":" structure."},{"text":"\n","type":"text"},{"type":"text","text":"It generates a mask of a specified size from a specified message digest and seed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Example","type":"text"}],"type":"strong"}]},{"type":"codeListing","syntax":"swift","code":["import Digest","","let mask = KDF.MGF1(.SHA1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12)","print(mask)"]},{"inlineContent":[{"type":"text","text":"giving:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["[224, 166, 61, 124, 140, 77, 129, 205, 28, 5, 103, 191]"]},{"text":"Random Numbers","anchor":"Random-Numbers","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"The MT class generates random numbers. There are two MT versions:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"One that uses the 32 bit Mersenne Twister algorithm","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"One that uses the 64 bit Mersenne Twister algorithm"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"MT conforms to the ","type":"text"},{"type":"codeVoice","code":"RandomNumberGenerator"},{"type":"text","text":" protocol. It generates:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Random bits","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Random integers in a specified open or closed interval"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Random unsigned integers in a specified open or closed interval"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Random floating point values in a specified open or closed interval"}]}]}]},{"inlineContent":[{"type":"text","text":"A generator instance must be instantiated either with a randomly generated seed value or with a specified seed or seed array."},{"type":"text","text":" "},{"type":"text","text":"The sequence of generated numbers is deterministic and depends solely on the initial seed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The internal state of a generator instance can be saved with the ","type":"text"},{"code":"getState","type":"codeVoice"},{"text":" method and reinstated later with the ","type":"text"},{"code":"setState","type":"codeVoice"},{"type":"text","text":" method."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example 1"}],"type":"strong"}]},{"code":["import Digest","","\/\/ 32 bit version, randomly generated seed","let mt32 = MT(kind: .MT32)","","let theState = mt32.getState()","for _ in 0 ..< 3 {","  print(mt32.randomInt(in: 0 ..< 100))","}","mt32.setState(state: theState)","print(\"After reinstate\")","for _ in 0 ..< 3 {","  print(mt32.randomInt(in: 0 ..< 100))","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"giving (for example):"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["24","75","33","After reinstate","24","75","33"]},{"inlineContent":[{"inlineContent":[{"text":"Example 2","type":"text"}],"type":"strong"}],"type":"paragraph"},{"syntax":"swift","code":["import Digest","","\/\/ 64 bit version, seed array = [123, 456, 789]","let mt64 = MT(kind: .MT64, seed: [123, 456, 789])","","for _ in 0 ..< 10 {","    print(mt64.randomInt(in: -1000 ... 1000))","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"code":["781","570","-403","29","-924","-368","553","-60","989","418"],"syntax":"swift","type":"codeListing"},{"style":"important","name":"Important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"code":"MT","type":"codeVoice"},{"text":" is not suitable for cryptographic applications.","type":"text"}]}]},{"level":3,"text":"Usage","type":"heading","anchor":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use Digest, in your project Package.swift file add a dependency like"}]},{"type":"codeListing","syntax":"swift","code":["dependencies: [","  package(url: \"https:\/\/github.com\/leif-ibsen\/Digest\", from: \"1.5.0\"),","]"]},{"type":"paragraph","inlineContent":[{"text":"Digest itself does not depend on other packages.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"Digest requires Swift 5.0. It also requires that the "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":" types be 64 bit types."}]}],"style":"important","name":"Important","type":"aside"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/digest"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Digest/documentation/Digest/SHAKE":{"role":"symbol","identifier":"doc:\/\/Digest\/documentation\/Digest\/SHAKE","title":"SHAKE","navigatorTitle":[{"kind":"identifier","text":"SHAKE"}],"abstract":[{"type":"text","text":"The SHAKE structure"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SHAKE","kind":"identifier"}],"url":"\/documentation\/digest\/shake","type":"topic"},"doc://Digest/documentation/Digest/KDF":{"identifier":"doc:\/\/Digest\/documentation\/Digest\/KDF","navigatorTitle":[{"text":"KDF","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/digest\/kdf","title":"KDF","abstract":[{"type":"text","text":"The KDF structure"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KDF"}],"type":"topic","role":"symbol"},"doc://Digest/documentation/Digest":{"kind":"symbol","url":"\/documentation\/digest","title":"Digest","type":"topic","identifier":"doc:\/\/Digest\/documentation\/Digest","role":"collection","abstract":[{"text":"Digest and random number utilities","type":"text"}]},"doc://Digest/documentation/Digest/MessageDigest":{"url":"\/documentation\/digest\/messagedigest","type":"topic","role":"symbol","identifier":"doc:\/\/Digest\/documentation\/Digest\/MessageDigest","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MessageDigest"}],"navigatorTitle":[{"text":"MessageDigest","kind":"identifier"}],"title":"MessageDigest","abstract":[{"type":"text","text":"The MessageDigest class"}]},"doc://Digest/documentation/Digest/HMAC":{"navigatorTitle":[{"text":"HMAC","kind":"identifier"}],"title":"HMAC","type":"topic","identifier":"doc:\/\/Digest\/documentation\/Digest\/HMAC","kind":"symbol","url":"\/documentation\/digest\/hmac","abstract":[{"text":"The HMAC structure","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HMAC"}]},"doc://Digest/documentation/Digest/XOF":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"XOF","kind":"identifier"}],"title":"XOF","navigatorTitle":[{"text":"XOF","kind":"identifier"}],"url":"\/documentation\/digest\/xof","abstract":[{"type":"text","text":"The XOF structure"}],"identifier":"doc:\/\/Digest\/documentation\/Digest\/XOF","kind":"symbol","type":"topic","role":"symbol"},"doc://Digest/documentation/Digest/References":{"abstract":[{"type":"text","text":"Algorithms from the following documents have been used in the implementation"}],"role":"article","identifier":"doc:\/\/Digest\/documentation\/Digest\/References","url":"\/documentation\/digest\/references","type":"topic","kind":"article","title":"References"},"doc://Digest/documentation/Digest/MT":{"identifier":"doc:\/\/Digest\/documentation\/Digest\/MT","kind":"symbol","navigatorTitle":[{"text":"MT","kind":"identifier"}],"url":"\/documentation\/digest\/mt","title":"MT","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"MT","kind":"identifier"}],"abstract":[{"type":"text","text":"The Mersenne Twister class"}],"type":"topic","role":"symbol"},"doc://Digest/documentation/Digest/Bytes":{"role":"symbol","navigatorTitle":[{"text":"Bytes","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Array of unsigned 8 bit values","type":"text"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bytes","kind":"identifier"}],"identifier":"doc:\/\/Digest\/documentation\/Digest\/Bytes","url":"\/documentation\/digest\/bytes","title":"Bytes"},"doc://Digest/documentation/Digest/Byte":{"abstract":[{"type":"text","text":"Unsigned 8 bit value"}],"role":"symbol","identifier":"doc:\/\/Digest\/documentation\/Digest\/Byte","url":"\/documentation\/digest\/byte","type":"topic","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Byte"}],"navigatorTitle":[{"kind":"identifier","text":"Byte"}],"title":"Byte"}}}
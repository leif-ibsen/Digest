//
//  MT32Test.swift
//  
//
//  Created by Leif Ibsen on 10/04/2024.
//

import XCTest
@testable import Digest

final class MT32Test: XCTestCase {

    /*
        Values generated by:
        A C-program for MT19937, with initialization improved 2002/1/26.
        Coded by Takuji Nishimura and Makoto Matsumoto.
    */
    
    // seed = 0
    let randomValues1: [UInt32] = [
        2357136044, 2546248239, 3071714933, 3626093760, 2588848963, 3684848379, 2340255427, 3638918503, 1819583497, 2678185683,
        2774094101, 1650906866, 1879422756, 1277901399, 3830135878,  243580376, 4138900056, 1171049868, 1646868794, 2051556033,
        3400433126, 3488238119, 2271586391, 2061486254, 2439732824, 1686997841, 3975407269, 3590930969,  305097549, 1449105480,
         374217481, 2783877012,   86837363, 1581585360, 3576074995, 4110950085, 3342157822,  602801999, 3736673711, 3736996288,
        4203133778, 2034131043, 3432359896, 3439885489, 1982038771, 2235433757, 3352347283, 2915765395,  507984782, 3095093671,
        2748439840, 2499755969,  615697673, 2308000441, 4057322111, 3258229280, 2241321503,  454869706, 1780959476, 2034098327,
        1136257699,  800291326, 3325308363, 3165039474, 1959150775,  930076700, 2441405218,  580757632,   80701568, 1392175012,
        2652724277,  642848645, 2628931110,  954863080, 2649711348, 1659957521, 4053367119, 3876630916, 2928395881, 1932520490,
        1544074682, 2633087519, 1877037944, 3875557633, 2996303169,  426405863,  258666409, 4165298233, 2863741219, 2805215078,
        2880367735,  734051083,  903586222, 1538251858,  553734235, 3224172416, 1354754446, 2610612835, 1562125877, 1396067212,
        2448976505,  165035946, 1883779156, 2724186315, 4245033284, 4118655750,  438279108, 2803713071,  897118847, 2727557108,
         692819075, 4274779084, 2805078884, 2499028148, 1087879144, 1779699534, 2002789519, 2038810260, 1049799907, 2677955514,
         682769175, 1451731663,  474057613, 2898039157, 2818914133, 1362371120,  593491249, 3342968389,  844314793, 4078376611,
        1583662528, 2845531231, 3526139077,   58289758,  417046784, 2675103601, 3598945970, 2893346084,  412739490, 4174471984,
        4193861469, 3771812227, 2012841570, 2188820010, 4195156941,  239292784, 2597791719, 1937714069, 3175112905,   85846399,
         168310272, 1897133962, 1214646642, 4207292971,  516240314, 1543802239, 1271912471, 2065422011,  509931650, 2957777273,
        1365727330, 3781615166, 1779245987, 3943791326,  275511419,  931243971, 2974145106, 2427467694, 2433534691, 3715587220,
        1139839185, 2186005042, 2247333275, 3937295118,  403471401, 3956341818, 2473671361,  356965412, 3991296778, 1192792150,
        1368243243,   40186728, 2866505739, 3617831682,  566067507, 2779591760, 3076601888, 3613725878, 1242989696, 1137007398,
         786800915, 1708627118, 2519053866, 2374350195,   86361272,  708413884, 3560270312, 1588313677,   20166942,  628962584,
        2911199869, 2446492418, 1159675395, 3022528606, 3157634274, 1238996843, 4132568333, 1860958064, 1068386600, 3247453512,
        2474576915, 1701229151, 2542800712, 3848455578, 2457803202, 2744145144,  958128308, 3829197123, 4092025836, 2920816445,
        1920388878, 1929289568, 3635297540, 4202930115, 3004240621,  499083403, 1277481980, 3294341718, 3495235021, 1768754041,
        1702979181, 2900988747, 3784309432, 1072866832, 2496547992, 1345262493, 3787024533, 4146431086, 2974400537, 2527438288,
        3114943420, 2833254265, 2153171830, 2290103413, 4106347965,  990131795, 2765916833, 1695950696, 1820443552, 2657762532,
        2604439035, 2039540475,   82434169, 2019202374, 1295253973, 3075516703, 2835423757, 1236911943, 1245873848, 1646957720,
        2654356047, 3217659945, 1841547538, 3772923432,  581856694,  441794767, 1281112843,  396742822, 2447980655, 1520618845,
        2537779193, 2370032769, 2466708191,  144418678, 2805476140, 4161659096, 2800762237, 1378672664, 1852928067,  950315986,
        3850638319,  606723843, 1578666218,  417728204, 1872025574, 4226429219, 3830781654, 1118155774, 3462576829, 2306494149,
        3023178455, 1923828267,  430471200,  427645963, 3949147752, 1513167060, 3067643018, 2015409846, 4290015211, 3612669349,
         641875581, 3885432476, 3728573039,  161316328,  697901826, 2183198235, 2643808211,  716604633,  531802775, 3345998645,
        3642167603, 3714860206, 3467408532, 1766935477, 2444269085,  601177667, 1748838947,  142689063,  297069961, 4220127305,
        2995433769, 1603271575, 1947950979, 1804209966, 3101205210,  217274290, 3721083756, 1569793795, 4189832991,   71416585,
        3675647370,  991030811,   50311597, 3285270727, 1546093991, 4054979645, 3135285589, 3221222241,  737143852, 1457728290,
        2237835170, 2102596696,  233379873, 1455929989,  858978536,  770904831,   79550500,  734381824, 3408905675, 1990506786,
         961749189, 3756262270, 1483274165, 4054963454, 3986078800, 2612426174, 3025436808, 2562615485,  136747137, 3365726417,
         707356016, 2147596579, 2669229432,  216337755, 2479177896, 3002603380, 1021741860, 4262310064, 4012418585, 1147883843,
        2636963687, 2916671996, 2300525347, 3712060530, 2533644062, 3224851485, 3135850225, 4142452001, 1339793554, 2380453137,
        1710346461,  912210260,  901272061,  955386370,  799692869,  939521381, 4056048524, 2446299692, 3176346485, 1941793533,
        2106504514, 4167134831,  976738395, 2922917205, 1092452775,  366341671,  249233355,  242314902, 1865805214, 2095246993,
        1339153094, 3783885767, 2990772498, 4193624924, 1622431787, 2652820563,  771391921, 2330014505,  105994333, 3670537390,
         288834965, 3194745033, 2917969753, 2055555570, 1948613088, 2908043227, 2304590153, 2607238684, 3851173867, 3069599953,
        4253473385, 2016475066,  931565440, 1958567894, 2847899199, 3893036048, 1130961002,  589357220,   88695390,  984489496,
        3257211508, 3786380479, 1374463171, 3884475699, 1646964872, 2773623736, 2526802779, 1394502749, 3569325947, 2232142574,
        2701456471,     237728, 3748006035, 1339429448, 1174854087, 1827300439, 3427585037, 3802496314,  797300305, 2920060024,
        4092209012, 1959062455, 2952739648, 2076224203,  925598428, 3387610020, 4068925721,  985445152, 3139001770, 3780849422,
        1090671062, 1347298588,  916167956, 4112220114, 2225655108, 2026157590,  110220515, 3056229242,  891077203,  660112007,
        1824010184, 3137225277, 1607047821, 2775684613, 1991041280,  922905736, 1192406223,  800831951, 2520219573, 3468530827,
        3710231556, 3208681895,  504795484, 2898447277, 2222126362, 1189249610,  567228212,  751227886, 3078888881, 3025693915,
        1701063475, 1989214947, 2428466025, 3609613074,  787180917,  879891746,  622116403,  708492958, 2096185781,  536153914,
        1527345067, 3101312823, 4039124476,  130794492, 3287046930, 3208315821, 3215485783,  397697473, 3881446726,  933942762,
         358296629, 3218023216, 2371648606, 3142600763, 2510305616,  195913370, 4131485308,  898322595, 1254764090, 1232290737,
        1034351722, 2908823753,  430759212,  270747405,   70564729, 2386495302, 3992298022,   39685799, 2877269640, 3577871373,
        3372206072, 4227662727, 1210021584, 3021487096, 2518612502,  780100088,  274685775, 2200713177, 2085754632, 2493001443,
        4198309638, 3382467793, 3764561351, 2604792276, 1452381657,  938033090, 4129912380, 1954935184,  995150904, 3774716786,
        4077293293, 2114275991, 4043186456, 3073311748, 3432548964, 2088039404, 2707753265, 3043191127, 3755038238, 2139495990,
        1258512537, 3627314964, 3646184801,  834693477, 2653760185, 3321409943,   56851867, 4184409117, 1491356577, 3703592307,
         636260149, 3351906935, 4216925107, 4230681430, 2054584822, 3236556807, 2136279657,   17386481, 2746513545, 1157405366,
        1583058816, 1763050323,  587982200, 1839207332, 3530968785, 1279220884,  815390581, 1722850288, 2196098307,  518217854,
         963434282, 4212073025,  420238868, 1744274212, 3703084356, 2444741584, 4178657392, 1475774383, 4126753418, 3388182765,
        3893626216, 1766831070, 3324507995, 1543058987, 1430847551, 1715834783,  348327828, 1296353734, 1749087497, 3329543612,
         997438043, 3978054255,  569030051, 1397197139,  229467980, 4092548370, 3116404081,   59907914,   49080546, 2291217633,
        3309619115, 1308169859,  631131020, 3791854820,  341544762, 1076416385,  384842097, 2909461632, 2886423335, 3480744984,
        1053844154, 1856061732, 1806203235, 3230393157, 2393880710, 3563114499, 3696039138, 1627937657, 3122631336,  414677436,
        1161049505, 1100111132,  564714308, 2542342170,  237830880, 2046454008, 1295356269, 2095663027, 1125788873, 1969305013,
        1959108805, 2253108129, 2934670983, 1898441341, 2987688542, 3662039112, 1217704182, 1861606228, 1631773831, 3551381187,
         778037461, 2187607515, 3386777196,  370986307,  244160614, 2834849620, 2993580359,  887317075, 3344471263, 3639019776,
        3338940037, 2926415195, 1114211435,  766081950, 1605515209,  300042195, 2523721223,   41610389, 1171761125, 3831324124,
        1592800648,  573228715,  846341678, 3346604032, 1975065960, 3973546675,  191608358, 3071669337, 3435097162, 2108049907,
         330525410, 2016479867, 2228379991, 3791207520, 1317739347, 2097705242, 2480528078, 1780553760, 4120734835,  747805126,
        2772703073, 2041352620,  151880507, 3365742393, 1848564402, 2389846189, 2190505705,  686623876, 2302864825,  617742429,
        2926558555, 2789422481, 1192266147, 2315947714,  553451924, 1398805421, 1686529209,  631419855, 4107731319,  686636708,
         803721065,  555821758, 3882581508, 2486452721, 2335628786,  396254413, 1962419614, 3910759789, 3788339031,  356360930,
        1969688995, 3437599305, 3110276314, 3767248823, 1713800730,  401405302, 3882841110, 1830969804, 2963634895, 2032467298,
        3004853850, 2491927603, 1407548390, 3076245294, 3250339536,  116260413, 2731861436, 3141327663, 1030879226, 3294083176,
         689508992,   41946506, 3420475339, 1324078989, 4119589191, 1000149598, 1967691270, 2162204333, 2538257653, 4096202142,
        3683890703, 2395781289, 1963759782,  418624821, 4088269739, 2670088786, 2472832391, 3706653916, 3525167937,  677025449,
        3903454018, 4262452338, 3502648156,  365076814,  684679909,  405693659, 2701098230, 2721325156, 1711262111, 4077201629,
         269350066, 4023295484, 1821204654, 1921475165, 1111039602, 3125431969, 3646591756, 3187887840,  143042281, 1318495056,
        4118799426,  514414024, 1526297587, 1906444413, 1532044426, 1682657904,   70130394, 2284274843,  795566776, 3630783608,
        1723396417, 2303281600, 3991276229, 2921738072,  427842850, 2616397775, 4060039171,  422959804, 3734424814,  395255461,
        1950612651,  240371411, 1403169624,  371654214,  999628436, 1018651526, 2639105820, 3605680755,  142054278, 2243564354,
          67027548, 2203639772, 1841663590, 2791007077,  292375931, 2339000005, 1082078317,  139437385,  949878884, 2491732662,
        1087447885, 3311802261,  562877947, 1615880863,   51695185, 2108935203,  496001261, 4216110323, 2656352506, 1050769800,
        4184398590, 1607705881, 4253499413,  196106669, 1756873957, 1331730390,  699883920, 3571348633, 2743460846, 3466136695,
        2105845413, 2748882815, 4249482625, 1580987781,  280479430, 1343265164, 3363966298, 3443860042, 1238662139,  302568374,
        1036885070, 2935923518, 2845435464, 1635219655, 1056833325, 2722712709, 2859843119, 3980915387, 2221823146, 3667644867,
        1821448330, 2137510642, 2382366009, 1837534683, 1232876889, 3532865923, 3034715261, 3170659022, 1781796690, 1920468165,
        1548531386, 4161406852, 3559054353, 1559765701, 3972702655, 1707393374,  197599896, 3172617859,  999125317, 1928798632,
        1496879268, 4025605690, 3500254385, 1104809399, 4232653464, 1639645857, 4161701778, 2994200417, 3886723534, 3852886769,
        1273699463,  519948213, 4260655851, 1037430830, 1071250928,  980384756,  454863487, 2102426529, 4084310353, 3829060765,
        1002532364, 1538059894, 2962532142, 1654582134,  250638624, 3937312546, 3138371699,  488838743, 3786959484, 2710663577,
        1170107566,  570436082, 1628036971, 1607368244, 1607589865, 1393308270, 3216021056, 2921073996, 1021374326, 3416795721,
         738103442, 2164378372, 1929692935, 1272351363, 1307681840, 3805178956, 3604289829, 1511272564, 1021093357, 3171362352,
        2157746285, 2385258450, 4048365747,  865511985, 2722999367, 2355871578, 3724979633, 2231848942, 4038169885, 1498010115,
        3224510538,  105741908, 3004652010,  639216961, 4157380471,  566300180, 4270918864, 3040482346, 1940559346, 3045441564,
         304383386, 2627439447, 1257540788, 2885818672,  654358466, 1922066022, 1793090313, 2989628674,  563883380, 1624898412,
        2594666217,  429634393, 1644148092, 4124271477, 3845653092,  311103578, 4156646468,   82895465, 2348852746, 4207235084,
        1180358248,  637708513, 2543610277, 1111117991, 3851559840,  925689210, 1746906401, 2490704794, 2371158115, 4190821593,
        1166739762, 1172564312, 1956117714, 4166440724, 1725346526,  109510300, 1066927688, 3814118674, 2172679577, 3043451800]
    
    // seed = [0x123, 0x234, 0x345, 0x456]
    let randomValues2: [UInt32] = [
        1067595299,  955945823,  477289528, 4107218783, 4228976476, 3344332714, 3355579695,  227628506,  810200273, 2591290167,
        2560260675, 3242736208,  646746669, 1479517882, 4245472273, 1143372638, 3863670494, 3221021970, 1773610557, 1138697238,
        1421897700, 1269916527, 2859934041, 1764463362, 3874892047, 3965319921,   72549643, 2383988930, 2600218693, 3237492380,
        2792901476,  725331109,  605841842,  271258942,  715137098, 3297999536, 1322965544, 4229579109, 1395091102, 3735697720,
        2101727825, 3730287744, 2950434330, 1661921839, 2895579582, 2370511479, 1004092106, 2247096681, 2111242379, 3237345263,
        4082424759,  219785033, 2454039889, 3709582971,  835606218, 2411949883, 2735205030,  756421180, 2175209704, 1873865952,
        2762534237, 4161807854, 3351099340,  181129879, 3269891896,  776029799, 2218161979, 3001745796, 1866825872, 2133627728,
          34862734, 1191934573, 3102311354, 2916517763, 1012402762, 2184831317, 4257399449, 2899497138, 3818095062, 3030756734,
        1282161629,  420003642, 2326421477, 2741455717, 1278020671, 3744179621,  271777016, 2626330018, 2560563991, 3055977700,
        4233527566, 1228397661, 3595579322, 1077915006, 2395931898, 1851927286, 3013683506, 1999971931, 3006888962, 1049781534,
        1488758959, 3491776230,  104418065, 2448267297, 3075614115, 3872332600,  891912190, 3936547759, 2269180963, 2633455084,
        1047636807, 2604612377, 2709305729, 1952216715,  207593580, 2849898034,  670771757, 2210471108,  467711165,  263046873,
        3569667915, 1042291111, 3863517079, 1464270005, 2758321352, 3790799816, 2301278724, 3106281430,    7974801, 2792461636,
         555991332,  621766759, 1322453093,  853629228,  686962251, 1455120532,  957753161, 1802033300, 1021534190, 3486047311,
        1902128914, 3701138056, 4176424663, 1795608698,  560858864, 3737752754, 3141170998, 1553553385, 3367807274,  711546358,
        2475125503,  262969859,  251416325, 2980076994, 1806565895,  969527843, 3529327173, 2736343040, 2987196734, 1649016367,
        2206175811, 3048174801, 3662503553, 3138851612, 2660143804, 1663017612, 1816683231,  411916003, 3887461314, 2347044079,
        1015311755, 1203592432, 2170947766, 2569420716,  813872093, 1105387678, 1431142475,  220570551, 4243632715, 4179591855,
        2607469131, 3090613241,  282341803, 1734241730, 1391822177, 1001254810,  827927915, 1886687171, 3935097347, 2631788714,
        3905163266,  110554195, 2447955646, 3717202975, 3304793075, 3739614479, 3059127468,  953919171, 2590123714, 1132511021,
        3795593679, 2788030429,  982155079, 3472349556,  859942552, 2681007391, 2299624053,  647443547,  233600422,  608168955,
        3689327453, 1849778220, 1608438222, 3968158357, 2692977776, 2851872572,  246750393, 3582818628, 3329652309, 4036366910,
        1012970930,  950780808, 3959768744, 2538550045,  191422718, 2658142375, 3276369011, 2927737484, 1234200027, 1920815603,
        3536074689, 1535612501, 2184142071, 3276955054,  428488088, 2378411984, 4059769550, 3913744741, 2732139246,   64369859,
        3755670074,  842839565, 2819894466, 2414718973, 1010060670, 1839715346, 2410311136,  152774329, 3485009480, 4102101512,
        2852724304,  879944024, 1785007662, 2748284463, 1354768064, 3267784736, 2269127717, 3001240761, 3179796763,  895723219,
         865924942, 4291570937,   89355264, 1471026971, 4114180745, 3201939751, 2867476999, 2460866060, 3603874571, 2238880432,
        3308416168, 2072246611, 2755653839, 3773737248, 1709066580, 4282731467, 2746170170, 2832568330,  433439009, 3175778732,
          26248366, 2551382801,  183214346, 3893339516, 1928168445, 1337157619, 3429096554, 3275170900, 1782047316, 4264403756,
        1876594403, 4289659572, 3223834894, 1728705513, 4068244734, 2867840287, 1147798696,  302879820, 1730407747, 1923824407,
        1180597908, 1569786639,  198796327,  560793173, 2107345620, 2705990316, 3448772106, 3678374155,  758635715,  884524671,
         486356516, 1774865603, 3881226226, 2635213607, 1181121587, 1508809820, 3178988241, 1594193633, 1235154121,  326117244,
        2304031425,  937054774, 2687415945, 3192389340, 2003740439, 1823766188, 2759543402,   10067710, 1533252662, 4132494984,
          82378136,  420615890, 3467563163,  541562091, 3535949864, 2277319197, 3330822853, 3215654174, 4113831979, 4204996991,
        2162248333, 3255093522, 2219088909, 2978279037,  255818579, 2859348628, 3097280311, 2569721123, 1861951120, 2907080079,
        2719467166,  998319094, 2521935127, 2404125338,  259456032, 2086860995, 1839848496, 1893547357, 2527997525, 1489393124,
        2860855349,   76448234, 2264934035,  744914583, 2586791259, 1385380501,   66529922, 1819103258, 1899300332, 2098173828,
        1793831094,  276463159,  360132945, 4178212058,  595015228,  177071838, 2800080290, 1573557746, 1548998935,  378454223,
        1460534296, 1116274283, 3112385063, 3709761796,  827999348, 3580042847, 1913901014,  614021289, 4278528023, 1905177404,
          45407939, 3298183234, 1184848810, 3644926330, 3923635459, 1627046213, 3677876759,  969772772, 1160524753, 1522441192,
         452369933, 1527502551,  832490847, 1003299676, 1071381111, 2891255476,  973747308, 4086897108, 1847554542, 3895651598,
        2227820339, 1621250941, 2881344691, 3583565821, 3510404498,  849362119,  862871471,  797858058, 2867774932, 2821282612,
        3272403146, 3997979905,  209178708, 1805135652,    6783381, 2823361423,  792580494, 4263749770,  776439581, 3798193823,
        2853444094, 2729507474, 1071873341, 1329010206, 1289336450, 3327680758, 2011491779,   80157208,  922428856, 1158943220,
        1667230961, 2461022820, 2608845159,  387516115, 3345351910, 1495629111, 4098154157, 3156649613, 3525698599, 4134908037,
         446713264, 2137537399, 3617403512,  813966752, 1157943946, 3734692965, 1680301658, 3180398473, 3509854711, 2228114612,
        1008102291,  486805123,  863791847, 3189125290, 1050308116, 3777341526, 4291726501,  844061465, 1347461791, 2826481581,
         745465012, 2055805750, 4260209475, 2386693097, 2980646741,  447229436, 2077782664, 1232942813, 4023002732, 1399011509,
        3140569849, 2579909222, 3794857471,  900758066, 2887199683, 1720257997, 3367494931, 2668921229,  955539029, 3818726432,
        1105704962, 3889207255, 2277369307, 2746484505, 1761846513, 2413916784, 2685127085, 4240257943, 1166726899, 4215215715,
        3082092067, 3960461946, 1663304043, 2087473241, 4162589986, 2507310778, 1579665506,  767234210,  970676017,  492207530,
        1441679602, 1314785090, 3262202570, 3417091742, 1561989210, 3011406780, 1146609202, 3262321040, 1374872171, 1634688712,
        1280458888, 2230023982,  419323804, 3262899800,   39783310, 1641619040, 1700368658, 2207946628, 2571300939, 2424079766,
         780290914, 2715195096, 3390957695,  163151474, 2309534542, 1860018424,  555755123,  280320104, 1604831083, 2713022383,
        1728987441, 3639955502,  623065489, 3828630947, 4275479050, 3516347383, 2343951195, 2430677756,  635534992, 3868699749,
         808442435, 3070644069, 4282166003, 2093181383, 2023555632, 1568662086, 3422372620, 4134522350, 3016979543, 3259320234,
        2888030729, 3185253876, 4258779643, 1267304371, 1022517473,  815943045,  929020012, 2995251018, 3371283296, 3608029049,
        2018485115,  122123397, 2810669150, 1411365618, 1238391329, 1186786476, 3155969091, 2242941310, 1765554882,  279121160,
        4279838515, 1641578514, 3796324015,   13351065,  103516986, 1609694427,  551411743, 2493771609, 1316337047, 3932650856,
        4189700203,  463397996, 2937735066, 1855616529, 2626847990,   55091862, 3823351211,  753448970, 4045045500, 1274127772,
        1124182256,   92039808, 2126345552,  425973257,  386287896, 2589870191, 1987762798, 4084826973, 2172456685, 3366583455,
        3602966653, 2378803535, 2901764433, 3716929006, 3710159000, 2653449155, 3469742630, 3096444476, 3932564653, 2595257433,
         318974657, 3146202484,  853571438,  144400272, 3768408841,  782634401, 2161109003,  570039522, 1886241521,   14249488,
        2230804228, 1604941699, 3928713335, 3921942509, 2155806892,  134366254,  430507376, 1924011722,  276713377,  196481886,
        3614810992, 1610021185, 1785757066,  851346168, 3761148643, 2918835642, 3364422385, 3012284466, 3735958851, 2643153892,
        3778608231, 1164289832,  205853021, 2876112231, 3503398282, 3078397001, 3472037921, 1748894853, 2740861475,  316056182,
        1660426908,  168885906,  956005527, 3984354789,  566521563, 1001109523, 1216710575, 2952284757, 3834433081, 3842608301,
        2467352408, 3974441264, 3256601745, 1409353924, 1329904859, 2307560293, 3125217879, 3622920184, 3832785684, 3882365951,
        2308537115, 2659155028, 1450441945, 3532257603, 3186324194, 1225603425, 1124246549,  175808705, 3009142319, 2796710159,
        3651990107,  160762750, 1902254979, 1698648476, 1134980669,  497144426, 3302689335, 4057485630, 3603530763, 4087252587,
         427812652,  286876201,  823134128, 1627554964, 3745564327, 2589226092, 4202024494,   62878473, 3275585894, 3987124064,
        2791777159, 1916869511, 2585861905, 1375038919, 1403421920,   60249114, 3811870450, 3021498009, 2612993202,  528933105,
        2757361321, 3341402964, 2621861700,  273128190, 4015252178, 3094781002, 1621621288, 2337611177, 1796718448, 1258965619,
        4241913140, 2138560392, 3022190223, 4174180924,  450094611, 3274724580,  617150026, 2704660665, 1469700689, 1341616587,
         356715071, 1188789960, 2278869135, 1766569160, 2795896635,   57824704, 2893496380, 1235723989, 1630694347, 3927960522,
         428891364, 1814070806, 2287999787, 4125941184, 3968103889, 3548724050, 1025597707, 1404281500, 2002212197,   92429143,
        2313943944, 2403086080, 3006180634, 3561981764, 1671860914, 1768520622, 1803542985,  844848113, 3006139921, 1410888995,
        1157749833, 2125704913, 1789979528, 1799263423,  741157179, 2405862309,  767040434, 2655241390, 3663420179, 2172009096,
        2511931187, 1680542666,  231857466, 1154981000,  157168255, 1454112128, 3505872099, 1929775046, 2309422350, 2143329496,
        2960716902,  407610648, 2938108129, 2581749599,  538837155, 2342628867,  430543915,  740188568, 1937713272, 3315215132,
        2085587024, 4030765687,  766054429, 3517641839,  689721775, 1294158986, 1753287754, 4202601348, 1974852792,   33459103,
        3568087535, 3144677435, 1686130825, 4134943013, 3005738435, 3599293386,  426570142,  754104406, 3660892564, 1964545167,
         829466833,  821587464, 1746693036, 1006492428, 1595312919, 1256599985, 1024482560, 1897312280, 2902903201,  691790057,
        1037515867, 3176831208, 1968401055, 2173506824, 1089055278, 1748401123, 2941380082,  968412354, 1818753861, 2973200866,
        3875951774, 1119354008, 3988604139, 1647155589, 2232450826, 3486058011, 3655784043, 3759258462,  847163678, 1082052057,
         989516446, 2871541755, 3196311070, 3929963078,  658187585, 3664944641, 2175149170, 2203709147, 2756014689, 2456473919,
        3890267390, 1293787864, 2830347984, 3059280931, 4158802520, 1561677400, 2586570938,  783570352, 1355506163,   31495586,
        3789437343, 3340549429, 2092501630,  896419368,  671715824, 3530450081, 3603554138, 1055991716, 3442308219, 1499434728,
        3130288473, 3639507000,   17769680, 2259741420,  487032199, 4227143402, 3693771256, 1880482820, 3924810796,  381462353,
        4017855991, 2452034943, 2736680833, 2209866385, 2128986379,  437874044,  595759426,  641721026, 1636065708, 3899136933,
         629879088, 3591174506,  351984326, 2638783544, 2348444281, 2341604660, 2123933692,  143443325, 1525942256,  364660499,
         599149312,  939093251, 1523003209,  106601097,  376589484, 1346282236, 1297387043,  764598052, 3741218111,  933457002,
        1886424424, 3219631016,  525405256, 3014235619,  323149677, 2038881721, 4100129043, 2851715101, 2984028078, 1888574695,
        2014194741, 3515193880, 4180573530, 3461824363, 2641995497, 3179230245, 2902294983, 2217320456, 4040852155, 1784656905,
        3311906931,   87498458, 2752971818, 2635474297, 2831215366, 3682231106, 2920043893, 3772929704, 2816374944,  309949752,
        2383758854,  154870719,  385111597, 1191604312, 1840700563,  872191186, 2925548701, 1310412747, 2102066999, 1504727249,
        3574298750, 1191230036, 3330575266, 3180292097, 3539347721,  681369118, 3305125752, 3648233597,  950049240, 4173257693,
        1760124957,  512151405,  681175196,  580563018, 1169662867, 4015033554, 2687781101,  699691603, 2673494188, 1137221356,
         123599888,  472658308, 1053598179, 1012713758, 3481064843, 3759461013, 3981457956, 3830587662, 1877191791, 3650996736,
         988064871, 3515461600, 4089077232, 2225147448, 1249609188, 2643151863, 3896204135, 2416995901, 1397735321, 3460025646]

    func test1() throws {
        var m32 = MT32(UInt32(0))
        for i in 0 ..< randomValues1.count {
            XCTAssertEqual(randomValues1[i], m32.next32())
        }
    }

    func test2() throws {
        var m32 = MT32([UInt32(0x123), 0x234, 0x345, 0x456])
        for i in 0 ..< randomValues2.count {
            XCTAssertEqual(randomValues2[i], m32.next32())
        }
    }

    func testInt() throws {
        var x1 = [Int](repeating: 0, count: 1000)
        var x2 = [Int](repeating: 0, count: 1000)
        let m32 = MT(kind: .MT32)
        var state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomInt(in: Int.min ... Int.max)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomInt(in: Int.min ... Int.max)
        }
        XCTAssertEqual(x1, x2)
        state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomInt(in: 0 ... Int.max)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomInt(in: 0 ... Int.max)
        }
        XCTAssertEqual(x1, x2)
        state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomInt(in: Int.min ... 0)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomInt(in: Int.min ... 0)
        }
        XCTAssertEqual(x1, x2)
    }

    func testInt32() throws {
        var x1 = [Int32](repeating: 0, count: 1000)
        var x2 = [Int32](repeating: 0, count: 1000)
        let m32 = MT(kind: .MT32)
        var state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomInt(in: Int32.min ... Int32.max)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomInt(in: Int32.min ... Int32.max)
        }
        XCTAssertEqual(x1, x2)
        state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomInt(in: 0 ... Int32.max)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomInt(in: 0 ... Int32.max)
        }
        XCTAssertEqual(x1, x2)
        state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomInt(in: Int32.min ... 0)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomInt(in: Int32.min ... 0)
        }
        XCTAssertEqual(x1, x2)
    }

    func testInt64() throws {
        var x1 = [Int64](repeating: 0, count: 1000)
        var x2 = [Int64](repeating: 0, count: 1000)
        let m32 = MT(kind: .MT32)
        var state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomInt(in: Int64.min ... Int64.max)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomInt(in: Int64.min ... Int64.max)
        }
        XCTAssertEqual(x1, x2)
        state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomInt(in: 0 ... Int64.max)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomInt(in: 0 ... Int64.max)
        }
        XCTAssertEqual(x1, x2)
        state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomInt(in: Int64.min ... 0)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomInt(in: Int64.min ... 0)
        }
        XCTAssertEqual(x1, x2)
    }

    func testUInt() throws {
        var x1 = [UInt](repeating: 0, count: 1000)
        var x2 = [UInt](repeating: 0, count: 1000)
        let m32 = MT(kind: .MT32)
        let state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomUInt(in: 0 ... UInt.max)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomUInt(in: 0 ... UInt.max)
        }
        XCTAssertEqual(x1, x2)
    }

    func testUInt32() throws {
        var x1 = [UInt32](repeating: 0, count: 1000)
        var x2 = [UInt32](repeating: 0, count: 1000)
        let m32 = MT(kind: .MT32)
        let state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomUInt(in: 0 ... UInt32.max)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomUInt(in: 0 ... UInt32.max)
        }
        XCTAssertEqual(x1, x2)
    }

    func testUInt64() throws {
        var x1 = [UInt64](repeating: 0, count: 1000)
        var x2 = [UInt64](repeating: 0, count: 1000)
        let m32 = MT(kind: .MT32)
        let state = m32.getState()
        for i in 0 ..< x1.count {
            x1[i] = m32.randomUInt(in: 0 ... UInt64.max)
        }
        m32.setState(state: state)
        for i in 0 ..< x2.count {
            x2[i] = m32.randomUInt(in: 0 ... UInt64.max)
        }
        XCTAssertEqual(x1, x2)
    }

    func testMinMaxInt() throws {
        let m32 = MT(kind: .MT32)
        XCTAssertTrue(m32.randomInt(in: 0 ... 0) == 0)
        XCTAssertTrue(m32.randomInt(in: 0 ..< 1) == 0)
        XCTAssertTrue(m32.randomInt(in: Int.max ... Int.max) == Int.max)
        XCTAssertTrue(m32.randomInt(in: Int.max - 1 ..< Int.max) == Int.max - 1)
        XCTAssertTrue(m32.randomInt(in: Int.min ... Int.min) == Int.min)
        XCTAssertTrue(m32.randomInt(in: Int.min ..< Int.min + 1) == Int.min)
        XCTAssertTrue(m32.randomInt(in: Int32(0) ... Int32(0)) == 0)
        XCTAssertTrue(m32.randomInt(in: Int32(0) ..< Int32(1)) == 0)
        XCTAssertTrue(m32.randomInt(in: Int32.max ... Int32.max) == Int32.max)
        XCTAssertTrue(m32.randomInt(in: Int32.max - 1 ..< Int32.max) == Int32.max - 1)
        XCTAssertTrue(m32.randomInt(in: Int32.min ... Int32.min) == Int32.min)
        XCTAssertTrue(m32.randomInt(in: Int32.min ..< Int32.min + 1) == Int32.min)
        XCTAssertTrue(m32.randomInt(in: Int64(0) ... Int64(0)) == 0)
        XCTAssertTrue(m32.randomInt(in: Int64(0) ..< Int64(1)) == 0)
        XCTAssertTrue(m32.randomInt(in: Int64.max ... Int64.max) == Int64.max)
        XCTAssertTrue(m32.randomInt(in: Int64.max - 1 ..< Int64.max) == Int64.max - 1)
        XCTAssertTrue(m32.randomInt(in: Int64.min ... Int64.min) == Int64.min)
        XCTAssertTrue(m32.randomInt(in: Int64.min ..< Int64.min + 1) == Int64.min)
    }

    func testMinMaxUInt() throws {
        let m32 = MT(kind: .MT32)
        XCTAssertTrue(m32.randomUInt(in: UInt(0) ... UInt(0)) == 0)
        XCTAssertTrue(m32.randomUInt(in: UInt(0) ..< UInt(1)) == 0)
        XCTAssertTrue(m32.randomUInt(in: UInt.max ... UInt.max) == UInt.max)
        XCTAssertTrue(m32.randomUInt(in: UInt.max - 1 ..< UInt.max) == UInt.max - 1)
        XCTAssertTrue(m32.randomUInt(in: UInt.min ... UInt.min) == UInt.min)
        XCTAssertTrue(m32.randomUInt(in: UInt.min ..< UInt.min + 1) == UInt.min)
        XCTAssertTrue(m32.randomUInt(in: UInt32(0) ... UInt32(0)) == 0)
        XCTAssertTrue(m32.randomUInt(in: UInt32(0) ..< UInt32(1)) == 0)
        XCTAssertTrue(m32.randomUInt(in: UInt32.max ... UInt32.max) == UInt32.max)
        XCTAssertTrue(m32.randomUInt(in: UInt32.max - 1 ..< UInt32.max) == UInt32.max - 1)
        XCTAssertTrue(m32.randomUInt(in: UInt32.min ... UInt32.min) == UInt32.min)
        XCTAssertTrue(m32.randomUInt(in: UInt32.min ..< UInt32.min + 1) == UInt32.min)
        XCTAssertTrue(m32.randomUInt(in: UInt64(0) ... UInt64(0)) == 0)
        XCTAssertTrue(m32.randomUInt(in: UInt64(0) ..< UInt64(1)) == 0)
        XCTAssertTrue(m32.randomUInt(in: UInt64.max ... UInt64.max) == UInt64.max)
        XCTAssertTrue(m32.randomUInt(in: UInt64.max - 1 ..< UInt64.max) == UInt64.max - 1)
        XCTAssertTrue(m32.randomUInt(in: UInt64.min ... UInt64.min) == UInt64.min)
        XCTAssertTrue(m32.randomUInt(in: UInt64.min ..< UInt64.min + 1) == UInt64.min)
    }

    func testFloat() throws {
        let m32 = MT(kind: .MT32)
        for _ in 0 ..< 1000 {
            let x = m32.randomFloat(in: 0.0 ..< 1.0)
            XCTAssertTrue(0.0 <= x && x < 1.0)
        }
        for _ in 0 ..< 1000 {
            let x = m32.randomFloat(in: 0.0 ... 1.0)
            XCTAssertTrue(0.0 <= x && x <= 1.0)
        }
    }

}
